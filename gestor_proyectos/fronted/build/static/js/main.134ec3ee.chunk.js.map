{"version":3,"sources":["components/Headers/HeaderPublico.js","components/Footer.js","layout/publicLayout.js","components/Headers/HeaderAdmin.js","layout/admin.js","components/Headers/HeaderLider.js","layout/lider.js","components/Headers/HeaderEstudiante.js","layout/estudiante.js","pages/publico/actualizarUsuarios.js","pages/roles/GetRol.js","pages/roles/CreateRol.js","pages/roles/Index.js","components/imagenProyecto.jpg","components/Tarjetas.js","pages/proyectos/GetProject.js","pages/inscripciones/Inscripcion.js","pages/publico/home.js","pages/publico/login.js","pages/publico/registro.js","pages/admin/proyectos.js","pages/admin/registros.js","pages/admin/actualizar.js","pages/admin/proyectoId.js","pages/estudiante/inicio.js","pages/lider/inicio.js","App.js","index.js"],"names":["Header","Navbar","color","expand","className","style","NavbarBrand","href","Nav","navbar","NavItem","NavLink","to","NavbarText","type","Footer","class","backgroundColor","Layout","children","Row","Col","size","UsuariosUp","client","ApolloClient","uri","cache","InMemoryCache","GET_ROL","gql","GET_ROLS","useQuery","loading","error","data","Table","getRols","map","rol","name","value","nombreRol","onChange","e","mutate","mutation","_id","target","descripcion","Form","onClick","GetRol","ApolloProvider","CREATE_ROL","CreateRolForm","useMutation","createRol","useState","setNombre","setDescripcion","setError","success","setSuccess","onSubmit","preventDefault","variables","then","catch","message","replace","FormGroup","Label","for","Input","required","Button","CreateRol","index","bordered","Tarjeta","nombre","general","especifico","presupuesto","url","src","imagen","alt","GET_PROJECT","GET_PROJECTS","enlace","getProjects","fechaTerminacion","console","log","objetivoGeneral","lider","objetivoEspecifico","estadoIsActive","fase","fechaInicio","Tarjetas","GetProject","link","GET_INSCRIPCION","GET_INSCRIPCIONES","xs","lg","Card","CardHeader","CardBody","responsive","getInscripciones","idProyecto","idEstudiante","aceptadoIsActive","fechaIngreso","fechaEgreso","apellido","get_inscripcion","Home","Index","Inscripcion","Login","id","CREATE_USER","Registro","createUser","setApellido","correo","setCorreo","identificacion","setIdentifiacion","contrasena","setContrasena","setRol","selected","CreateUser","GET_User","GET_USERS","getUsers","user","estado","GetUser","Get_Users","props","idUsuario","match","params","datos","filter","project","colSpan","colspan","proyectos","App","path","exact","component","Actualizar","ProyectoId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.134ec3ee.chunk.js","sourcesContent":["import React from \"react\";\n \nimport {  Nav,  Navbar,  NavbarBrand,  NavbarText,  NavItem,  NavLink } from \"reactstrap\";\nimport {Link} from 'react-router-dom'\nconst Header = () => {\n  return (\n    <div>\n      <Navbar color=\"primary\"  expand=\"md\">\n      <div className=\"navbar-brand\" style={{color:\"#ffff\"}}    >\n   <h1>WF</h1>\n  </div>\n        <NavbarBrand style={{color:\"#ffff\"}}  href=\"\">Gestión de Proyectos</NavbarBrand>\n        <Nav className=\"mr-auto\" navbar>\n\n        \n\n          <NavItem>\n            <NavLink  style={{color:\"#ffff\"}}    href=\"https://github.com/Anderzon00/WebFear\">\n              GitHub\n            </NavLink>\n          </NavItem>\n          \n      \n\n        </Nav>\n\n        <Link to='/login'>\n          <NavbarText>\n            <div>\n              <button type=\"button\" className=\"btn btn-success\">Iniciar Sesión</button>   \n            </div>\n          </NavbarText>\n        </Link>\n\n        \n\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Header;","\n import { Image } from 'react-bootstrap'\n\nimport React from 'react'\n\nconst Footer = () => {\n    return (\n        <footer>\n\n          \n<footer class=\"bg-light text-center text-lg-start\">\n \n  <div class=\"text-center p-3\" style={{backgroundColor:\"black\" ,color:'White' }}>\n    © 2021 WebFear\n     \n  </div>\n   \n</footer>\n\n        \n\n        </footer>\n         \n    )\n}\n\nexport default Footer","import React from \"react\";\nimport Header from \"../components/Headers/HeaderPublico\";\nimport Footer from \"../components/Footer\";\nimport { Col, Row } from \"reactstrap\";\n\nconst Layout = ({ children }) => {\n    return (\n        <div className=\"mainContainer\">\n            <Row>\n                <Col>\n                    <Header />\n                </Col>\n            </Row>\n            <main>{children}</main>\n            <Footer></Footer>\n        </div>\n    );\n}\n\nexport default Layout;","import React from \"react\";\nimport {BsFillPersonFill} from \"react-icons/bs\"\nimport {  Nav,  Navbar,  NavbarBrand,  NavbarText,  NavItem,  NavLink } from \"reactstrap\";\nimport {Link} from 'react-router-dom'\nconst Header = () => {\n  return (\n    <div>\n      <Navbar color=\"primary\"  expand=\"md\">\n      <div className=\"navbar-brand\" style={{color:\"#ffff\"}}    >\n   <h1>WF</h1>\n  </div>\n        <NavbarBrand style={{color:\"#ffff\"}}  href=\"/admin/proyectos\">Gestión de Proyectos</NavbarBrand>\n        <Nav className=\"mr-auto\" navbar>\n\n          <NavItem>\n            <NavLink style={{color:\"#ffff\"}}  href=\"/admin/registros\">Registros</NavLink>\n          </NavItem>\n\n          <NavItem>\n            <NavLink style={{color:\"#ffff\"}}  href=\"/admin/proyectos\">Proyectos</NavLink>\n          </NavItem>\n\n        </Nav>\n\n        <NavbarText>\n          <div>\n          <BsFillPersonFill size=\"30\" color=\"white\" />          \n          </div>\n        </NavbarText>\n        <NavbarText>\n            <div>\n              <button type=\"button\" className=\"btn btn-success\">Cerrar Sesión</button>   \n            </div>\n          </NavbarText>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Header;","import '../styles/styles.css'\nimport React from \"react\";\nimport Header from \"../components/Headers/HeaderAdmin\";\nimport { Col, Row } from \"reactstrap\";\n//import SideNavigation from \"../components/SideNavigation\";\n\nconst Layout = ({ children }) => {\n    const styles = {\n        contentDiv: {\n            display: \"flex\",\n        },\n        contentMargin: {\n            marginLeft: \"10px\",\n            width: \"100%\",\n        },\n    };\n    return (\n        <div className=\"mainContainer\">\n                    <Header />\n            <main>{children}</main>\n        </div>\n    );\n}\n\nexport default Layout;","import React from \"react\";\nimport {BsFillPersonFill} from \"react-icons/bs\"\nimport {  Nav,  Navbar,  NavbarBrand,  NavbarText,  NavItem,  NavLink } from \"reactstrap\";\nimport {Link} from 'react-router-dom'\nconst Header = () => {\n  return (\n    <div>\n      <Navbar color=\"primary\"  expand=\"md\">\n      <div className=\"navbar-brand\" style={{color:\"#ffff\"}}    >\n   <h1>WF</h1>\n  </div>\n        <NavbarBrand style={{color:\"#ffff\"}}  href=\"/lider/proyectos\">Proyectos</NavbarBrand>\n        <Nav className=\"mr-auto\" navbar>\n\n          <NavItem>\n            <NavLink style={{color:\"#ffff\"}}  href=\"/components/\">Registro usuarios</NavLink>\n          </NavItem>\n\n\n          <NavItem>\n            <NavLink  style={{color:\"#ffff\"}}    href=\"https://github.com/Anderzon00/WebFear\">\n              GitHub\n            </NavLink>\n          </NavItem>\n          \n      \n\n        </Nav>\n\n        <NavbarText>\n          <div>\n          <BsFillPersonFill size=\"30\" color=\"white\" />          \n          </div>\n        </NavbarText>\n        <NavbarText>\n            <div>\n              <button type=\"button\" className=\"btn btn-success\">Cerrar Sesión</button>   \n            </div>\n          </NavbarText>\n        \n\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Header;","import '../styles/styles.css'\nimport React from \"react\";\nimport Header from \"../components/Headers/HeaderLider\";\nimport Footer from \"../components/Footer\";\nimport { Col, Row } from \"reactstrap\";\n//import SideNavigation from \"../components/SideNavigation\";\n\nconst Layout = ({ children }) => {\n    const styles = {\n        contentDiv: {\n            display: \"flex\",\n        },\n        contentMargin: {\n            marginLeft: \"10px\",\n            width: \"100%\",\n        },\n    };\n    return (\n        <div className=\"mainContainer\">\n                    <Header />\n            <main>{children}</main>\n        </div>\n    );\n}\n\nexport default Layout;","import React from \"react\";\nimport {BsFillPersonFill} from \"react-icons/bs\" \nimport {  Nav,  Navbar,  NavbarBrand,  NavbarText,  NavItem,  NavLink } from \"reactstrap\";\nimport {Link} from 'react-router-dom'\nconst Header = () => {\n  return (\n    <div>\n      <Navbar color=\"primary\"  expand=\"md\">\n      <div className=\"navbar-brand\" style={{color:\"#ffff\"}}    >\n   <h1>WF</h1>\n  </div>\n        <NavbarBrand style={{color:\"#ffff\"}}  href=\"/estudiante/proyectos\">Proyectos</NavbarBrand>\n        <Nav className=\"mr-auto\" navbar>\n\n          <NavItem>\n            <NavLink style={{color:\"#ffff\"}}  href=\"\">a</NavLink>\n          </NavItem>\n\n          <NavItem>\n            <NavLink style={{color:\"#ffff\"}}  href=\"\">b</NavLink>\n          </NavItem>\n\n        </Nav>\n\n        <NavbarText>\n          <div>\n          <BsFillPersonFill size=\"30\" color=\"white\" />          \n          </div>\n        </NavbarText>\n        <NavbarText>\n            <div>\n              <button type=\"button\" className=\"btn btn-success\">Cerrar Sesión</button>   \n            </div>\n          </NavbarText>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Header;","import '../styles/styles.css'\nimport React from \"react\";\nimport Header from \"../components/Headers/HeaderEstudiante\";\nimport { Col, Row } from \"reactstrap\";\n//import SideNavigation from \"../components/SideNavigation\";\n\nconst Layout = ({ children }) => {\n    const styles = {\n        contentDiv: {\n            display: \"flex\",\n        },\n        contentMargin: {\n            marginLeft: \"10px\",\n            width: \"100%\",\n        },\n    };\n    return (\n        <div className=\"mainContainer\">\n                    <Header />\n            <main>{children}</main>\n        </div>\n    );\n}\n\nexport default Layout;","\n//<Tarjetas nombre=\"Hola\" general=\"Hola2\"></Tarjetas>\nfunction UsuariosUp(){\n    return(\n        <div >\n            <h1>Actualización de usuarios</h1>\n        </div>\n    )\n}\nexport default UsuariosUp;","import { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nimport { Card , Col, Form, Table } from \"reactstrap\";\n\n\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:5010/graphql',\n    cache: new InMemoryCache()\n});\n\nconst GET_ROL = gql`\n{\n    getRols {\n        _id\n        nombreRol\n        descripcion\n      }\n    }\n`;\n\nfunction GET_ROLS() {\n    const { loading, error, data } = useQuery(GET_ROL);\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n    return (\n        <div>\n            \n                \n                    <Table>\n                        <thead>\n                            <tr>\n                                <th>Nombre</th>\n                                <th>Descripción</th>\n                                <th>Acciones</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {data.getRols.map(rol => (\n                                <tr key={rol._id}>\n                                    <th>\n                                        <input type=\"text\" name=\"nombreRol\" value={rol.nombreRol} onChange={(e) => {\n                                            client.mutate({\n                                                mutation: gql`\n                              mutation{\n                              updateRol(_id: \"${rol._id}\", nombreRol: \"${e.target.value}\"){\n                              _id\n                              nombreRol\n                              descripcion\n                              }\n                              }`})\n                                        }} />\n                                    </th>\n\n                                    <th>\n                                        <input type=\"text\" name=\"descripcion\" value={rol.descripcion} onChange={(e) => {\n                                            client.mutate({\n                                                mutation: gql`\n                              mutation{\n                              updateRol(_id: \"${rol._id}\", descripcion: \"${e.target.value}\"){\n                              _id\n                              nombreRol\n                              descripcion\n                              }\n                              }`})\n                                        }} />\n                                    </th>\n                                    <th>\n                                        <Form>\n                                            <th>\n                                                <button className=\"btn btn-info\"   >Actualizar</button>\n                                            </th>\n                                            <td>\n                                                <button className=\"btn btn-danger\" onClick={() => {\n                                                    client.mutate({\n                                                        mutation: gql`\n                                            mutation{\n                                                deleteRol(_id: \"${rol._id}\"){\n                                                    _id\n                                                    nombreRol\n                                                    descripcion\n                                                } } ` })\n                                                }}>Eliminar</button>\n                                            </td>\n                                        </Form>\n                                    </th>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n               \n            \n        </div>\n    );\n}\n\nfunction GetRol() {\n    return (\n        <div>\n            <ApolloProvider client={client}>\n                <GET_ROLS />\n            </ApolloProvider>\n        </div>\n    );\n}\nexport default GetRol\n\n","import { ApolloClient, InMemoryCache, ApolloProvider, useMutation, gql } from \"@apollo/client\";  \nimport { FormGroup,Label,Input,Form,Button} from \"reactstrap\";\nimport { useState } from \"react\";\nimport { BrowserRouter } from 'react-router-dom';\nimport Index from \"./Index\";\n \nconst client = new ApolloClient({\n    uri: 'http://localhost:5010/graphql',\n    cache: new InMemoryCache()\n});\n\n const CREATE_ROL = gql`\n    mutation createRol($nombreRol: String!, $descripcion: String!) {\n        createRol(nombreRol: $nombreRol, descripcion: $descripcion) {\n            _id\n            nombreRol\n            descripcion\n        }\n    }\n`;\n\n \nconst CreateRolForm = () => {\n    const [createRol] = useMutation(CREATE_ROL);\n    const [nombreRol, setNombre] = useState(\"\");\n    const [descripcion, setDescripcion] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const [success, setSuccess] = useState(\"\");\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        createRol({\n            variables: {\n                _id: \"\",\n                nombreRol: nombreRol,\n                descripcion: descripcion\n\n            }\n        }).then(({ data }) => {\n            setSuccess(`Rol ${data.createRol.nombreRol} creado con éxito`);\n            setNombre(\"\");\n            setDescripcion(\"\");\n        }).catch((error) => {\n            setError(error.message.replace(\"GraphQL error: \", \"\"));\n        });\n    }\n\n    return (\n        \n        <ApolloProvider client={client}>   \n        <Form  onSubmit={handleSubmit}>\n\n        <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n        <Label for=\"nombreRol\" className=\"mr-sm-2\">Nombre</Label>\n        <Input type=\"text\" required className=\"form-control\" value={nombreRol} onChange={(e) => setNombre(e.target.value)} />\n      </FormGroup>\n\n        <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n          <Label for=\"descripción\" className=\"mr-sm-2\">descripción</Label>\n          <input type=\"text\" required className=\"form-control\" value={descripcion} onChange={(e) => setDescripcion(e.target.value)} />\n        </FormGroup>\n\n\n        <Button type=\"submit\" className=\"btn btn-success\">Crear</Button>\n      </Form>\n                            {error && <p className=\"text-danger\">{error}</p>}\n                            {success && <p className=\"text-success\">{success}</p>}\n        </ApolloProvider>\n    );\n}\n\n  function CreateRol() {\n    return (\n        <div>\n           \n            <ApolloProvider client={client}>\n                <CreateRolForm />\n            </ApolloProvider>\n        </div>\n    )\n}\n\n\nexport default CreateRol;\n\n\n\n\n        \n\n\n \n\n\n","\nimport {Table}  from 'reactstrap';\nimport GetRol from './GetRol';\nimport CreateRol from './CreateRol';\n\nfunction index() {\n    return (\n        <div>\n  \n  <Table     bordered={true}>\n                <thead>\n                    <tr>\n                        <th>CREAR</th>\n                        <th>GESTIONAR</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td><CreateRol/></td>\n                        <td><GetRol/></td>\n                    </tr>\n                   \n                </tbody>\n\n\n            </Table>\n         \n        </div>\n    );\n}\n\n\nexport default index;","export default __webpack_public_path__ + \"static/media/imagenProyecto.1ead0d36.jpg\";","import React from \"react\";\nimport '../styles/Form.css'\nimport { Link } from 'react-router-dom'\nimport imagen from './imagenProyecto.jpg'\nfunction Tarjeta ({nombre,general,especifico,presupuesto,url}) {\n    return (\n        <div>\n            <div class=\"card cardStyle\" >\n                <img src={imagen} class=\"card-img-top\" alt=\"...\"/>\n                <div class =\"card-body\">\n                <h4 >{nombre}</h4>\n                <h6>{general}</h6>\n                <p>{especifico}</p>\n                <p>{presupuesto}</p>\n                <Link to={url}>\n                    <button className=\"btn btn-info\">Actualizar</button>\n                </Link>\n                </div>\n            </div>\n        </div>\n\n    );\n};\n\nexport default Tarjeta;\n","import '../../styles/Form.css'\nimport {ApolloClient, InMemoryCache, ApolloProvider, useQuery,gql  } from \"@apollo/client\";\nimport { queries } from \"@testing-library/react\";\nimport { get } from \"jquery\";\nimport { Table } from \"reactstrap\";\nimport Tarjetas from \"../../components/Tarjetas\"\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:5010/graphql',\n\n    cache: new InMemoryCache()\n  }); \n\n  const GET_PROJECT = gql`\n  {\n    getProjects{\n      _id  \n      lider{_id}\n      nombre \n      objetivoGeneral \n      objetivoEspecifico\n    presupuesto\n    estadoIsActive\n    fechaTerminacion\n    fase\n    fechaInicio   \n     \n     }\n\n      \n\n\n\n        } \n  `;\n\n  function GET_PROJECTS({enlace}){\n    const { loading, error, data } = useQuery(GET_PROJECT);\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n \n   \n const {getProjects,fechaTerminacion} = data;\n \n console.log(getProjects);\n \n\n    return data.getProjects.map(({ _id, nombre, lider , objetivoGeneral,objetivoEspecifico,presupuesto,estadoIsActive,fechaTerminacion,fase,fechaInicio}) => (\n      <div key={_id}>\n\n        <Tarjetas nombre={nombre} general={objetivoGeneral} especifico={objetivoEspecifico} presupuesto={presupuesto} url={`${enlace}${_id}`}></Tarjetas>\n      </div>\n    ));      \n  }\n\n  const GetProject = ({link}) => {\n    return (\n      <ApolloProvider client={client}>\n          <div className='contenido'>\n          <GET_PROJECTS enlace={link}></GET_PROJECTS>\n          </div>\n      </ApolloProvider>\n    );\n  }\n\n  export default GetProject;\n\n    \n\n\n\n\n\n","import { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nimport { Card , Col, Form, Table,Row,CardBody,Button,CardHeader } from \"reactstrap\";\n \n\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:5010/graphql',\n    cache: new InMemoryCache()\n});\n\nconst GET_INSCRIPCION = gql`\n{\n    getInscripciones {\n      _id\n      idProyecto {\n        _id\n        nombre\n      }\n      idEstudiante {\n        _id\n        nombre\n        apellido\n      }\n      aceptadoIsActive\n      fechaIngreso\n      fechaEgreso\n    }\n  }\n  \n`;\n\nfunction GET_INSCRIPCIONES(){\nconst { loading, error, data } = useQuery(GET_INSCRIPCION);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n    return (\n        \n<div className=\"animated fadeIn\">\n        <Row>\n            <Col xs=\"12\" lg=\"12\">\n                <Card>\n                    <CardHeader>\n                        <i className=\"fa fa-align-justify\"></i> Inscripciones\n                    </CardHeader>\n\n                    <CardBody>\n                        <Table responsive>\n                            <thead>\n                                <tr>\n                                    <th>ID</th>\n                                    <th>ID Proyecto</th>\n                                    <th>ID Estudiante</th>\n                                    <th>Aceptado</th>\n                                    <th>Fecha Ingreso</th>\n                                    <th>Fecha Egreso</th>\n                                    <th>Acciones</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {data.getInscripciones.map(({ _id, idProyecto, idEstudiante, aceptadoIsActive, fechaIngreso, fechaEgreso }) => (\n                                    <tr key={_id}>\n                                        <td>{_id}</td>\n                                        <td>{idProyecto.nombre}</td>\n                                        <td>{idEstudiante.nombre}-{idEstudiante.apellido}</td>\n                                        <td>{ aceptadoIsActive ? \"Activo\" : \"Inactivo\"}</td>\n                                        <td>{fechaIngreso}</td>\n                                        <td>{fechaEgreso}</td>\n                                        <td>\n                                            <Button color=\"warning\" size=\"sm\" className=\"mr-1\">Editar</Button>\n                                            <Button color=\"danger\" size=\"sm\">Eliminar</Button>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    </div>\n             )\n\n\n}\n\n\nfunction get_inscripcion(){\n\nreturn(\n    <ApolloProvider client={client}>\n        <GET_INSCRIPCIONES />\n    </ApolloProvider>\n)\n\n\n}\n\nexport default get_inscripcion;\n\n\n ","import Index from '../roles/Index';\nimport  GetProject from '../proyectos/GetProject';       \nimport Inscripcion from '../inscripciones/Inscripcion';               \nimport '../../styles/styles.css'\n\n\nfunction Home(){\n    return(\n        <div>             \n\n            <h1>Inicio</h1>\n            <Index/>\n            <GetProject/>\n            <Inscripcion/>\n            \n        </div>\n    )\n}\nexport default Home;","import '../../styles/Form.css'\nimport { Link } from 'react-router-dom'\n\nfunction Login() {\n    return (\n        <div className = \"formulario\">\n            <h1>Iniciar Sesión</h1>\n            <form className=\"estilos\">\n                <div class=\"mb-3\">\n                    <label for=\"exampleInputEmail1\" class=\"form-label\"><b>Email</b></label>\n                    <input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\"/>\n                </div>\n                <div class=\"mb-3\">\n                    <label for=\"exampleInputPassword1\" class=\"form-label\"><b>Contraseña</b></label>\n                    <input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\"/>\n                </div>\n                <div class=\"texto\">\n                    <label class =\"form-check-label\" for=\"exampleCheck1\">¿No tienes cuenta aún? <Link to=\"/registro\">Registrate</Link></label>\n                </div>\n                <Link to=\"/estudiante\">\n                <button class=\"btn btn-primary\">Entrar</button>\n                </Link>\n            </form>\n            \n                <Link to=\"/lider\">\n                <button class=\"btn btn-primary\">Lider</button>\n                </Link>\n                <Link to=\"/admin/proyectos\">\n                <button class=\"btn btn-primary\">Administrador</button>\n                </Link>\n        </div>\n    )\n}\nexport default Login;","import '../../styles/Form.css'\nimport { Link } from 'react-router-dom'\nimport { ApolloClient, InMemoryCache, ApolloProvider, useMutation, gql } from \"@apollo/client\";\nimport { useState } from \"react\";\nimport { BrowserRouter } from 'react-router-dom';\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:5010/graphql',\n    cache: new InMemoryCache()\n});\n\nconst CREATE_USER = gql`\n mutation CreateUser($nombre: String!, $apellido: String!, $correo: String!, $identificacion: String!, $contrasena: String!, $rol: ID!) {\n    createUser(nombre: $nombre, apellido: $apellido, correo: $correo, identificacion: $identificacion, contrasena: $contrasena, rol: $rol) {\n      _id\n      nombre\n      apellido\n    }\n  }\n`;\n\n\nconst Registro = () => {\n    const [createUser] = useMutation(CREATE_USER);\n    const [nombre, setNombre] = useState(\"\");\n    const [apellido, setApellido] = useState(\"\");\n    const [correo, setCorreo] = useState(\"\");\n    const [identificacion,setIdentifiacion] = useState(\"\");\n    const [contrasena,setContrasena] = useState(\"\");\n    const [rol,setRol] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const [success, setSuccess] = useState(\"\");\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        createUser({\n            variables: {\n                _id: \"\",\n                nombre: nombre,\n                apellido: apellido,\n                correo:correo,\n                identificacion:identificacion,\n                contrasena:contrasena,\n                rol:rol\n            }\n        }).then(({ data }) => {\n            setSuccess(`User ${data.createUser.nombre} creado con éxito`);\n            setNombre(\"\");\n            setApellido(\"\");\n            setCorreo(\"\");\n            setIdentifiacion(\"\");\n            setContrasena(\"\");\n            setRol(\"\")\n        }).catch((error) => {\n            setError(error.message.replace(\"GraphQL error: \", \"\"));\n        });\n    }\n\n    return (\n\n        <ApolloProvider client={client}>\n            <div className=\"registro\">\n                <form class=\"row g-3\" onSubmit={handleSubmit}>\n                    <div class=\"col-md-6\">\n                        <label for=\"inputCity\" class=\"form-label\">Nombre</label>\n                        <input type=\"text\" required class=\"form-control\" id=\"inputCity\" value={nombre} onChange={(e) => setNombre(e.target.value)} />\n                    </div>\n                    <div class=\"col-md-6\">\n                        <label for=\"inputCity\" class=\"form-label\">Apellido</label>\n                        <input type=\"text\" required class=\"form-control\" id=\"inputCity\" value={apellido} onChange={(e) => setApellido(e.target.value)}/>\n                    </div>\n                    <div class=\"col-md-6\">\n                        <label for=\"inputEmail4\" class=\"form-label\">Correo</label>\n                        <input type=\"email\" required class=\"form-control\" id=\"inputEmail4\" value={correo} onChange={(e) => setCorreo(e.target.value)}/>\n                    </div>\n                    <div class=\"col-md-6\">\n                        <label for=\"inputCity\" class=\"form-label\">Identificación</label>\n                        <input type=\"text\" required class=\"form-control\" id=\"inputCity\" value={identificacion} onChange={(e) => setIdentifiacion(e.target.value)} />\n                    </div>\n                    <div class=\"col-md-6\">\n                        <label for=\"inputPassword4\" class=\"form-label\">Contraseña</label>\n                        <input type=\"password\" required class=\"form-control\" id=\"inputPassword4\" value={contrasena} onChange={(e) => setContrasena(e.target.value)}  />\n                    </div>\n                    <div class=\"col-md-6\">\n                        <label for=\"inputState\" class=\"form-label\">Tipo de usuario</label>\n                        <select id=\"inputState\" class=\"form-control\" aria-label=\"Default select example\" onChange={(e) => setRol(e.target.value)}>\n                            <option selected>Seleccione</option>\n                            <option value=\"61b6893ef684ce366c16439f\">Estudiante</option>\n                            <option value=\"61b6894cf684ce366c1643a3\">Lider</option>\n                            <option value=\"61b6895ef684ce366c1643a7\">Administrador</option>\n                        </select>\n                    </div>\n                    <div class=\"col-12 sboton\">\n                        <button type=\"submit\" class=\"btn btn-primary\">Crear</button>\n                    </div>\n                </form>\n            </div>\n            {error && <p className=\"text-danger\">{error}</p>}\n            {success && <p className=\"text-success\">{success}</p>}\n        </ApolloProvider>\n    );\n}\n\nfunction CreateUser() {\n    return (\n        <div>\n            <ApolloProvider client={client}>\n                <Registro />\n            </ApolloProvider>\n        </div>\n    )\n}\n\n\n\nexport default CreateUser;\n","import {ApolloClient, InMemoryCache, ApolloProvider, useQuery,gql  } from \"@apollo/client\";\nimport GET_PROJECTS from '../proyectos/GetProject'\n//import Tarjetas from \"../../components/Tarjetas\"\nimport '../../styles/Form.css'\n//import Tarjetas from \"../components/Tarjetas\"\n//import Proyectos from \"../pages/proyectos/GetProject\"\nconst propi={nombre:\"hola\",general:\"hola2\"};\n//<Tarjetas nombre=\"Hola\" general=\"Hola2\"></Tarjetas>\n//import { queries } from \"@testing-library/react\";\n//import { get } from \"jquery\";\n//import { Table } from \"reactstrap\";\n\n\n  const GetProject = () => {\n    return (\n        <div>\n          <h1>GetProject</h1>\n          <div className='contenido'>\n            <GET_PROJECTS link='/admin/proyectos/'/>\n          </div>\n        </div>\n    );\n  }\n\nexport default GetProject;\n","import {Link} from 'react-router-dom'\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nimport { Card, Col, Form, Table } from \"reactstrap\";\nimport '../../styles/Form.css'\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:5010/graphql',\n    cache: new InMemoryCache()\n});\n\nconst GET_User = gql`\n{\n    getUsers {\n        _id\n        nombre\n        apellido\n        correo\n        identificacion\n        rol{\n            nombreRol\n        }\n        estado\n      }\n    }\n`;\n\nfunction GET_USERS() {\n    const { loading, error, data } = useQuery(GET_User);\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n    return (\n        <div className = \"tabla\">\n            <div className=\"titulo\">\n            <h1>Usuarios Registrados</h1>\n            </div>\n            \n            <table className=\"table table-striped table-hover\">\n                <thead className=\"table-dark\">\n                    <tr>\n                        <th>Nombre</th>\n                        <th>Apellido</th>\n                        <th>Correo</th>\n                        <th>Identificación</th>\n                        <th>rol</th>\n                        <th>estado</th>\n                        <th>Acciones</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.getUsers.map(user => (\n                        <tr key={user._id}>\n                            <th>\n                                {user.nombre} \n                            </th>\n                            <th>\n                                {user.apellido} \n                            </th>\n                            <th>\n                                {user.correo} \n                            </th>\n                            <th>\n                                {user.identificacion}\n                            </th>\n                            <th>\n                                {user.rol.nombreRol} \n                            </th>\n                            <th>\n                                {user.estado} \n                            </th>\n                            <th>\n                                <Link to={`/admin/actualizar/${user._id}`}>\n                                <button className=\"btn btn-info\">Actualizar</button>\n                                </Link>\n                            </th>\n                        </tr>\n                    ))}\n                </tbody>\n                </table>\n\n\n        </div>\n    );\n}\n\nfunction GetUser() {\n    return (\n        <div>\n            <ApolloProvider client={client}>\n                <GET_USERS />\n            </ApolloProvider>\n        </div>\n    );\n}\nexport default GetUser\n\n/*\nfunction registros(){\n    return(\n        <div >\n            <h1>registro de usuarios</h1>\n        </div>\n    )\n}\nexport default registros;\n*/","import React from 'react'\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nimport { Link } from 'react-router-dom'\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:5010/graphql',\n    cache: new InMemoryCache()\n});\n\nconst GET_User = gql`\n{\n    getUsers {\n        _id\n        nombre\n        apellido\n        correo\n        identificacion\n        rol{\n            nombreRol\n        }\n        estado\n      }\n    }\n`;\nconst Get_Users = (props) => {\n    let idUsuario = props.match.params.idUsuario\n    const { loading, error, data } = useQuery(GET_User);\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n        const datos = data.getUsers.filter(\n            user=>user._id==idUsuario\n        )\n        console.log(datos)\n    return (\n        <div class=\"tabla\">\n            <table class=\"table table-striped table-hover\">\n                <thead class=\"table-dark\">\n                    <tr>\n                        <th>estado</th>\n                        <th>nombre</th>\n                        <th>apellido</th>\n\n                    </tr>\n                </thead>\n                <tbody>\n                    {datos.map(user => (\n                        <tr key={idUsuario}>\n                            <th>\n                                {user.estado}\n                            </th>\n                            <th>\n                                {user.nombre}\n                            </th>\n                            <th>\n                                {user.apellido}\n                            </th>\n                            <th>\n                                {user.correo}\n                            </th>\n                            <th>\n                                {user.identificacion}\n                            </th>\n                            <th>\n                                <select id=\"inputState\" class=\"form-control\" aria-label=\"Default select example\">\n                                    <option selected>Seleccione</option>\n                                    <option value=\"61b6893ef684ce366c16439f\">Estudiante</option>\n                                    <option value=\"61b6894cf684ce366c1643a3\">Lider</option>\n                                    <option value=\"61b6895ef684ce366c1643a7\">Administrador</option>\n                                </select>\n                            </th>\n                            <th>\n                                    <button className=\"btn btn-info\">Actualizar</button>\n                            </th>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n            </div>\n    );\n}\n\n\nexport default Get_Users\n/*\nimport { Link } from 'react-router-dom'\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nimport { Card, Col, Form, Table } from \"reactstrap\";\nimport '../../styles/Form.css'\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:5010/graphql',\n    cache: new InMemoryCache()\n});\n\nconst GET_User = gql`\n{\n    getUsers {\n        _id\n        nombre\n        apellido\n        correo\n        identificacion\n        rol{\n            nombreRol\n        }\n        estado\n      }\n    }\n`;\n\nconst GET_USERS = (props) => {\n    let idUsuario = props.match.params.idUsuario;\n    const { loading, error, data } = useQuery(GET_User);\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n    return (\n        <div class=\"tabla\">\n            <div class=\"titulo\">\n                <h1>Usuarios Registrados</h1>\n            </div>\n            <table class=\"table table-striped table-hover\">\n                <thead class=\"table-dark\">\n                    <tr>\n                        <th>estado</th>\n\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.getUsers.map(user => (\n                        <tr key={idUsuario}>\n                            <th>\n                                {user.estado}\n                            </th>\n                            <th>\n                                <select id=\"inputState\" class=\"form-control\" aria-label=\"Default select example\">\n                                    <option selected>Seleccione</option>\n                                    <option value=\"61b6893ef684ce366c16439f\">Estudiante</option>\n                                    <option value=\"61b6894cf684ce366c1643a3\">Lider</option>\n                                    <option value=\"61b6895ef684ce366c1643a7\">Administrador</option>\n                                </select>\n                            </th>\n                            <th>\n                                <Link to={`/admin/actualizar/${user._id}`}>\n                                    <button className=\"btn btn-info\">Actualizar</button>\n                                </Link>\n                            </th>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n\n\n        </div>\n    );\n}\n\nfunction GetUser() {\n    return (\n        <div>\n            <ApolloProvider client={client}>\n                <GET_USERS />\n            </ApolloProvider>\n        </div>\n    );\n}\nexport default GetUser */\n\n\n/*\nreturn (\n        <div class=\"tabla\">\n            <table class=\"table table-striped table-hover\">\n                <thead class=\"table-dark\">\n                    <tr>\n                        <th>estado</th>\n\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.getUsers.filter(user => (\n                        <tr key={idUsuario}>\n                            <th>\n                                {user.estado}\n                            </th>\n                            <th>\n                                <select id=\"inputState\" class=\"form-control\" aria-label=\"Default select example\">\n                                    <option selected>Seleccione</option>\n                                    <option value=\"61b6893ef684ce366c16439f\">Estudiante</option>\n                                    <option value=\"61b6894cf684ce366c1643a3\">Lider</option>\n                                    <option value=\"61b6895ef684ce366c1643a7\">Administrador</option>\n                                </select>\n                            </th>\n                            <th>\n                                <Link to={`/admin/actualizar/${user._id}`}>\n                                    <button className=\"btn btn-info\">Actualizar</button>\n                                </Link>\n                            </th>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n\n\n        </div>\n    );\n}\n*/ ","import React from 'react'\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nimport { Link } from 'react-router-dom'\nimport '../../styles/Form.css'\nconst client = new ApolloClient({\n    uri: 'http://localhost:5010/graphql',\n    cache: new InMemoryCache()\n});\n\nconst GET_PROJECT = gql`\n  {\n    getProjects{\n        _id  \n        lider{_id}\n        nombre \n        objetivoGeneral \n        objetivoEspecifico\n        presupuesto\n        estadoIsActive\n        fechaTerminacion\n        fase\n        fechaInicio   \n     \n     }\n        } \n  `;\n  function comprobacion(x){\n    if(x==true){\n        return 'Inactivo'\n    }else{\n        return 'Activo'\n    }\n  }\nconst GET_PROJECTS= (props) => {\n    let idProyecto = props.match.params.idProyecto\n    const { loading, error, data } = useQuery(GET_PROJECT);\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n        const datos = data.getProjects.filter(\n            project=>project._id==idProyecto\n        )\n        console.log(datos)\n    return (\n        <div class=\"tabla\">\n            <table class=\"table table-striped table-hover\">\n                <thead class=\"table-dark\">\n                    <tr>\n                        <th>id</th>\n                        <th>nombre</th>\n                        <th>Presupuesto</th>\n                        <th>Estado</th>\n                        <th>Fase</th>\n                        <th colSpan=\"4\">Acciones</th>\n\n                    </tr>\n                </thead>\n                <tbody>\n                    {datos.map(project => (\n                        <tr key={idProyecto}>\n                            <th>\n                                {project._id}\n                            </th>\n                            <th>\n                                {project.nombre}\n                            </th>\n                            <th>\n                                {project.presupuesto}\n                            </th>\n                            <th>\n                                {project.estadoIsActive}\n                            </th>\n                            <th>\n                                {project.fase}\n                            </th>\n                            <th colspan=\"4\">\n                                    <button className=\"btn btn-info botonTabla\">Activar</button>\n                                    <button className=\"btn btn-info\">Fase</button>\n                            </th>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n            </div>\n    );\n}\n\n\nexport default GET_PROJECTS","function proyectos(){\n    return(\n        <div >\n            <h1>Inicio Estudiantes</h1>\n        </div>\n    )\n}\nexport default proyectos;","function proyectos(){\n    return(\n        <div >\n            <h1>Inicio Lider</h1>\n        </div>\n    )\n}\nexport default proyectos;","import './App.css'\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n//Layouts\nimport LayoutPublico from \"./layout/publicLayout\";\nimport LayoutAdmin from \"./layout/admin\";\nimport LayoutLider from \"./layout/lider\";\nimport LayoutEstudiante from \"./layout/estudiante\"\n\n//Paginas\n\n//publico\nimport ActualizarUsuarios from './pages/publico/actualizarUsuarios';\nimport Home from'./pages/publico/home';\nimport Login from'./pages/publico/login';\nimport Registro from'./pages/publico/registro';\n\n//admin\nimport ProyectoAdmin from'./pages/admin/proyectos';\nimport ProyectoRegistros from './pages/admin/registros'\nimport Actualizar from './pages/admin/actualizar'\nimport ProyectoId from './pages/admin/proyectoId'\n//lider\nimport Inicio from './pages/estudiante/inicio'\n//estudiante\nimport PaginaLider from './pages/lider/inicio'\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Router>\n                <Switch>\n                    <Route path={['/admin/actualizar/:idUsuario','/admin/proyectos','/admin/proyectos/:idProyecto','/admin/registros','/admin/actualizar']}>\n                        <LayoutAdmin>\n                            <Switch>\n                                <Route exact path=\"/admin/registros\">\n                                    <ProyectoRegistros></ProyectoRegistros>\n                                </Route>\n                                <Route exact path=\"/admin/actualizar/:idUsuario\" component={Actualizar}>\n                                </Route> \n                                <Route exact path=\"/admin/actualizar\">\n                                    <ActualizarUsuarios/>\n                                </Route> \n                                <Route exact path=\"/admin/proyectos/:idProyecto\" component={ProyectoId}>\n                                </Route>\n                                <Route exact path=\"/admin/proyectos\">\n                                    <ProyectoAdmin></ProyectoAdmin>\n                                </Route>\n                            </Switch>\n                        </LayoutAdmin>\n                    </Route>\n                    <Route path={['/lider/proyectos']}>\n                        <LayoutLider>\n                            <Switch>\n                                <Route path=\"/lider/proyectos\">\n                                    <PaginaLider/>\n                                </Route>\n                            </Switch>\n                        </LayoutLider>\n                    </Route>\n                    <Route path={['/estudiante/proyectos']}>\n                        <LayoutEstudiante>\n                            <Switch>\n                                <Route path=\"/estudiante/proyectos\">\n                                    <Inicio/>\n                                </Route>\n                            </Switch>\n                        </LayoutEstudiante>\n                    </Route>\n                    <Route path={['/login','registro', '/']}>\n                        <LayoutPublico>\n                            <Switch>\n                                <Route path=\"/login\">\n                                    <Login/>\n                                </Route>\n                                <Route path=\"/registro\">\n                                    <Registro/>\n                                </Route>\n                                <Route path='/'>\n                                    <Home/>\n                                </Route>\n                            </Switch>\n                        </LayoutPublico>\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:5010/graphql',\n  cache: new InMemoryCache()\n});\n\n\n/*\n<React.Fragment>\n    <App />\n  </React.Fragment>,\n  */\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n    <App/>\n  </ApolloProvider>\n  </React.StrictMode>,document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}